import time

from fastapi import FastAPI
from fastapi.responses import JSONResponse

from src.api.books_router import router as books_router
from src.core.logging_service import LoggerService

app = FastAPI(title='Books API')
app.include_router(books_router)

log_service = LoggerService()
logger = log_service.get_logger()
logger.info("App started")


# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request, call_next):
    start_time = time.time()
    logger.info(f"üì• {request.method} {request.url}")

    try:
        response = await call_next(request)
        process_time = (time.time() - start_time) * 1000
        logger.info(
            f"üì§ {request.method} {request.url} -> {response.status_code} ({process_time:.2f} ms)"
        )
        return response
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return JSONResponse(
            status_code=500,
            content={"detail": "Internal Server Error"},
        )


#  –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π FastAPI
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    logger.exception(f"üî• –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {exc}")
    return JSONResponse(
        status_code=500,
        content={"detail": "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"},
    )


@app.get("/")
async def root():
    logger.info("–ó–∞–ø—Ä–æ—Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞")
    return {"message": "Hello, Loguru!"}
